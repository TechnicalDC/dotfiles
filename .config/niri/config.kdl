spawn-at-startup "/home/dilip/.config/hypr/autostart"

prefer-no-csd

environment {
	// Set a variable like this:
	// QT_QPA_PLATFORM "wayland"

	// Remove a variable by using null as the value:
	// DISPLAY null
	QT_QPA_PLATFORMTHEME "t5ct" // change to qt6ct if you have that
}

input {
	keyboard {
		xkb {
			// You can set rules, model, layout, variant and options.
			// For more information, see xkeyboard-config(7).

			// For example:
			// layout "us,ru"
			// options "grp:win_space_toggle,compose:ralt,ctrl:nocaps"
		}

		// Enable numlock on startup, omitting this setting disables it.
		numlock
	}

	touchpad {
		// off
		tap
		// dwt
		// dwtp
		// drag false
		// drag-lock
		natural-scroll
		// accel-speed 0.2
		// accel-profile "flat"
		// scroll-method "two-finger"
		// disabled-on-external-mouse
	}

	mouse {
		// off
		// natural-scroll
		// accel-speed 0.2
		// accel-profile "flat"
		// scroll-method "no-scroll"
	}

	trackpoint {
		// off
		// natural-scroll
		// accel-speed 0.2
		// accel-profile "flat"
		// scroll-method "on-button-down"
		// scroll-button 273
		// middle-emulation
	}

	// Uncomment this to make the mouse warp to the center of newly focused windows.
	// warp-mouse-to-focus

	// Focus windows and outputs automatically when moving the mouse into them.
	// Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
	focus-follows-mouse max-scroll-amount="0%"
}

/-output "eDP-1" {
	// Uncomment this line to disable this output.
	// off

	// Resolution and, optionally, refresh rate of the output.
	// The format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
	// If the refresh rate is omitted, niri will pick the highest refresh rate
	// for the resolution.
	// If the mode is omitted altogether or is invalid, niri will pick one automatically.
	// Run `niri msg outputs` while inside a niri instance to list all outputs and their modes.
	mode "1920x1080@120.030"

	// You can use integer or fractional scale, for example use 1.5 for 150% scale.
	scale 2

	// Transform allows to rotate the output counter-clockwise, valid values are:
	// normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
	transform "normal"

	// Position of the output in the global coordinate space.
	// This affects directional monitor actions like "focus-monitor-left", and cursor movement.
	// The cursor can only move between directly adjacent outputs.
	// Output scale and rotation has to be taken into account for positioning:
	// outputs are sized in logical, or scaled, pixels.
	// For example, a 3840×2160 output with scale 2.0 will have a logical size of 1920×1080,
	// so to put another output directly adjacent to it on the right, set its x to 1920.
	// If the position is unset or results in an overlap, the output is instead placed
	// automatically.
	position x=1280 y=0
}

layout {
	gaps 25
	center-focused-column "never"
	// always-center-single-column

	preset-column-widths {
		proportion 0.33333
		proportion 0.5
		proportion 0.66667
	}

	preset-window-heights {
		proportion 0.33333
		proportion 0.5
		proportion 0.66667
	}

	default-column-width { proportion 0.5; }

	focus-ring {
		off
		width 0
		active-color "#11262d"
		inactive-color "#11262d"
		// active-gradient from="#80c8ff" to="#c7ff7f" angle=45
		// inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
	}

	border {
		width 5
		active-color "#11262d"
		inactive-color "#11262d"
		urgent-color "#9b0000"
		// active-gradient from="#e5989b" to="#ffb4a2" angle=45 relative-to="workspace-view" in="oklch longer hue"
		// inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
	}

	shadow {
		on
		// draw-behind-window true
		softness 30
		spread 5
		offset x=0 y=5
		color "#0007"
	}

	struts {
		// left 64
		// right 64
		// top 64
		// bottom 64
	}
}

overview {
	backdrop-color "#11262d"
	workspace-shadow {
		// off
		softness 40
		spread 10
		offset x=0 y=10
		color "#00000050"
	}
}

hotkey-overlay {
	skip-at-startup
}

// Uncomment this line to ask the clients to omit their client-side decorations if possible.
// If the client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some client-side rounded corners.
// This option will also fix border/focus ring drawing behind some semitransparent windows.
// After enabling or disabling this, you need to restart the apps for this to take effect.
// prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
	// Uncomment to turn off all animations.
	// off

	// Slow down all animations by this factor. Values below 1 speed them up instead.
	// slowdown 3.0
}

// Window rules let you adjust behavior for individual windows.
// Find more information on the wiki:
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// Work around WezTerm's initial configure bug
// by setting an empty default-column-width.
window-rule {
	// This regular expression is intentionally made as specific as possible,
	// since this is the default config, and we want no false positives.
	// You can get away with just app-id="wezterm" if you want.
	match app-id=r#"^org\.wezfurlong\.wezterm$"#
	default-column-width {}
}

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
	// This app-id regular expression will work for both:
	// - host Firefox (app-id is "firefox")
	// - Flatpak Firefox (app-id is "org.mozilla.firefox")
	match app-id=r#"firefox$"# title="^Picture-in-Picture$"
	open-floating true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
	match app-id=r#"^org\.keepassxc\.KeePassXC$"#
	match app-id=r#"^org\.gnome\.World\.Secrets$"#

	block-out-from "screen-capture"

	// Use this instead if you want them visible on third-party screenshot tools.
	// block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
	geometry-corner-radius 12
	clip-to-geometry true
}

binds {
	Mod+Shift+Slash { show-hotkey-overlay; }

	// Suggested binds for running programs: terminal, app launcher, screen locker.
	Mod+Return hotkey-overlay-title="Open a Terminal: alacritty" { spawn "alacritty"; }
	Mod+D hotkey-overlay-title="Run an Application: rofi" { spawn "rofi" "-show" "drun"; }
	Mod+W hotkey-overlay-title="" { spawn "wall.sh"; }
	Mod+N hotkey-overlay-title="Open notification center" { spawn "swaync-client" "-t" "-sw"; }
	Mod+M hotkey-overlay-title="Open rofi mpc" { spawn "rofi-mpc"; }
	Mod+B hotkey-overlay-title="Open bookmarks" { spawn "rofi-bookmarks"; }
	Print hotkey-overlay-title="Open screenshot utility" { spawn "rofi-screenshot"; }

	// Example volume keys mappings for PipeWire & WirePlumber.
	// The allow-when-locked=true property makes them work even when the session is locked.
	XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
	XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
	XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
	XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
	XF86MonBrightnessUp   allow-when-locked=true { spawn "brightnessctl" "s" "+5%"; }
	XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "s" "5%-"; }

	Mod+O repeat=false { toggle-overview; }
	Mod+Q { close-window; }

	Mod+Left  { focus-column-left; }
	Mod+Down  { focus-window-down; }
	Mod+Up    { focus-window-up; }
	Mod+Right { focus-column-right; }
	Mod+H     { focus-column-left; }
	Mod+J     { focus-window-down; }
	Mod+K     { focus-window-up; }
	Mod+L     { focus-column-right; }

	Mod+Shift+Left  { move-column-left; }
	Mod+Shift+Down  { move-window-down; }
	Mod+Shift+Up    { move-window-up; }
	Mod+Shift+Right { move-column-right; }
	Mod+Shift+H     { move-column-left; }
	Mod+Shift+J     { move-window-down; }
	Mod+Shift+K     { move-window-up; }
	Mod+Shift+L     { move-column-right; }

	// Alternative commands that move across workspaces when reaching
	// the first or last window in a column.
	// Mod+J     { focus-window-or-workspace-down; }
	// Mod+K     { focus-window-or-workspace-up; }
	// Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
	// Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

	Mod+Home { focus-column-first; }
	Mod+End  { focus-column-last; }
	Mod+Ctrl+Home { move-column-to-first; }
	Mod+Ctrl+End  { move-column-to-last; }

	Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
	Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
	Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
	Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
	Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
	Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
	Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
	Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

	Mod+Page_Down      { focus-workspace-down; }
	Mod+Page_Up        { focus-workspace-up; }
	Mod+U              { focus-workspace-down; }
	Mod+I              { focus-workspace-up; }
	Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
	Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
	Mod+Ctrl+U         { move-column-to-workspace-down; }
	Mod+Ctrl+I         { move-column-to-workspace-up; }

	Mod+Shift+Page_Down { move-workspace-down; }
	Mod+Shift+Page_Up   { move-workspace-up; }
	Mod+Shift+U         { move-workspace-down; }
	Mod+Shift+I         { move-workspace-up; }

	// You can bind mouse wheel scroll ticks using the following syntax.
	// These binds will change direction based on the natural-scroll setting.
	//
	// To avoid scrolling through workspaces really fast, you can use
	// the cooldown-ms property. The bind will be rate-limited to this value.
	// You can set a cooldown on any bind, but it's most useful for the wheel.
	Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
	Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
	Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
	Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

	Mod+WheelScrollRight      { focus-column-right; }
	Mod+WheelScrollLeft       { focus-column-left; }
	Mod+Ctrl+WheelScrollRight { move-column-right; }
	Mod+Ctrl+WheelScrollLeft  { move-column-left; }

	// Usually scrolling up and down with Shift in applications results in
	// horizontal scrolling; these binds replicate that.
	Mod+Shift+WheelScrollDown      { focus-column-right; }
	Mod+Shift+WheelScrollUp        { focus-column-left; }
	Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
	Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

	// Similarly, you can bind touchpad scroll "ticks".
	// Touchpad scrolling is continuous, so for these binds it is split into
	// discrete intervals.
	// These binds are also affected by touchpad's natural-scroll, so these
	// example binds are "inverted", since we have natural-scroll enabled for
	// touchpads by default.
	// Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
	// Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

	Mod+1 { focus-workspace 1; }
	Mod+2 { focus-workspace 2; }
	Mod+3 { focus-workspace 3; }
	Mod+4 { focus-workspace 4; }
	Mod+5 { focus-workspace 5; }
	Mod+6 { focus-workspace 6; }
	Mod+7 { focus-workspace 7; }
	Mod+8 { focus-workspace 8; }
	Mod+9 { focus-workspace 9; }
	Mod+Shift+1 { move-column-to-workspace 1; }
	Mod+Shift+2 { move-column-to-workspace 2; }
	Mod+Shift+3 { move-column-to-workspace 3; }
	Mod+Shift+4 { move-column-to-workspace 4; }
	Mod+Shift+5 { move-column-to-workspace 5; }
	Mod+Shift+6 { move-column-to-workspace 6; }
	Mod+Shift+7 { move-column-to-workspace 7; }
	Mod+Shift+8 { move-column-to-workspace 8; }
	Mod+Shift+9 { move-column-to-workspace 9; }

	// Alternatively, there are commands to move just a single window:
	// Mod+Ctrl+1 { move-window-to-workspace 1; }

	// Switches focus between the current and the previous workspace.
	// Mod+Tab { focus-workspace-previous; }

	// The following binds move the focused window in and out of a column.
	// If the window is alone, they will consume it into the nearby column to the side.
	// If the window is already in a column, they will expel it out.
	Mod+BracketLeft  { consume-or-expel-window-left; }
	Mod+BracketRight { consume-or-expel-window-right; }

	// Consume one window from the right to the bottom of the focused column.
	Mod+Comma  { consume-window-into-column; }
	// Expel the bottom window from the focused column to the right.
	Mod+Period { expel-window-from-column; }

	Mod+R { switch-preset-column-width; }
	Mod+Shift+R { switch-preset-window-height; }
	Mod+Ctrl+R { reset-window-height; }
	Mod+F { maximize-column; }
	Mod+Shift+F { fullscreen-window; }

	// Expand the focused column to space not taken up by other fully visible columns.
	// Makes the column "fill the rest of the space".
	Mod+Ctrl+F { expand-column-to-available-width; }

	Mod+C { center-column; }

	// Center all fully visible columns on screen.
	Mod+Ctrl+C { center-visible-columns; }

	// Finer width adjustments.
	// This command can also:
	// * set width in pixels: "1000"
	// * adjust width in pixels: "-5" or "+5"
	// * set width as a percentage of screen width: "25%"
	// * adjust width as a percentage of screen width: "-10%" or "+10%"
	// Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
	// set-column-width "100" will make the column occupy 200 physical screen pixels.
	Mod+Minus { set-column-width "-10%"; }
	Mod+Equal { set-column-width "+10%"; }

	// Finer height adjustments when in column with other windows.
	Mod+Shift+Minus { set-window-height "-10%"; }
	Mod+Shift+Equal { set-window-height "+10%"; }

	// Move the focused window between the floating and the tiling layout.
	Mod+S       { toggle-window-floating; }
	Mod+Shift+S { switch-focus-between-floating-and-tiling; }

	// Toggle tabbed column display mode.
	// Windows in this column will appear as vertical tabs,
	// rather than stacked on top of each other.
	Mod+T { toggle-column-tabbed-display; }

	// Actions to switch layouts.
	// Note: if you uncomment these, make sure you do NOT have
	// a matching layout switch hotkey configured in xkb options above.
	// Having both at once on the same hotkey will break the switching,
	// since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
	Mod+Space       { switch-layout "next"; }
	Mod+Shift+Space { switch-layout "prev"; }

	// Applications such as remote-desktop clients and software KVM switches may
	// request that niri stops processing the keyboard shortcuts defined here
	// so they may, for example, forward the key presses as-is to a remote machine.
	// It's a good idea to bind an escape hatch to toggle the inhibitor,
	// so a buggy application can't hold your session hostage.
	//
	// The allow-inhibiting=false property can be applied to other binds as well,
	// which ensures niri always processes them, even when an inhibitor is active.
	Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

	// The quit action will show a confirmation dialog to avoid accidental exits.
	Mod+Shift+E { quit; }
	Ctrl+Alt+Delete { quit; }

	// Powers off the monitors. To turn them back on, do any input like
	// moving the mouse or pressing any other key.
	Mod+Shift+P { power-off-monitors; }
}
